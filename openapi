openapi: 3.0.1
components:
  responses:
    Not_Authenticated:
      description: A failure to authenticate the user in header
      content:
        application/json:
          schema:
            type: object
            example:
              message: failed to authenticate
    Client_Error:
      description: A failure to accomplish task due to client error
      content:
        application/json:
          schema:
            type: object
            example:
              message: failure
              result: failed to proceed due to error | CLIENT_ERROR_MESSAGE
    Internal_Error:
      description: A failure to provide response due to internal error
      content:
        application/json:
          schema:
            type: object
            example:
              message: failure
              result: ERROR_MESSAGE
  parameters:
    user_header:
      name: user
      description: user header (must be active and online)
      in: header
      required: true
      schema:
        type: string
    page_number:
      name: page_number
      description: Page of library table to show (0 is the first page)
      in: path
      required: true
      schema:
        type: integer
      example: 0
info:
  title: recipe_task
  description: 'API for dealing with user library, includes admin and user API'
  contact:
    name: Grigory Kovshov
    email: barkev2009@bk.ru
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0-oas3
servers:
  - url: 'http://{host}:{port}/api/v1'
    description: Main server
    variables:
      host:
        default: 127.0.0.1
        description: local host
      port:
        default: '8000'
paths:
  /users:
    get:
      description: The method returns the table, which encompasses all users, available in the database. For proper request one should verify himself/herself in the request headers (the verification is necessary for all requests, except registration).
      tags:
        - users
      responses:
        '200':
          description: A table of all users
        '403':
          $ref: '#/components/responses/Not_Authenticated'
        '500':
          $ref: '#/components/responses/Internal_Error'
      summary: Returns table of all users
    parameters:
      - $ref: '#/components/parameters/user_header'
  '/users/{nickname}':
    get:
      description: Returns a profile of the verified user (based on a path nickname)
      tags:
        - users
      responses:
        '200':
          description: A user profile for a certain nickname
        '403':
          $ref: '#/components/responses/Not_Authenticated'
        '500':
          $ref: '#/components/responses/Internal_Error'
      summary: Returns a user profile
    parameters:
      - name: nickname
        description: ID to get limit record of
        in: path
        required: true
        schema:
          type: string
        example: user_1
      - $ref: '#/components/parameters/user_header'
  /users/first_ten/:
    get:
      description: Returns the first ten active users, sorted by the quantity of their library in descending order
      tags:
        - users
      responses:
        '200':
          description: The first ten active users
        '403':
          $ref: '#/components/responses/Not_Authenticated'
        '500':
          $ref: '#/components/responses/Internal_Error'
      summary: Returns the first ten active users
    parameters:
      - $ref: '#/components/parameters/user_header'
  /recipes:
    post:
      description: Lets the verified user to post a new recipe
      tags:
       - library
      responses:
        '200':
          description: A successful post of new recipe
          content:
            application/json:
              schema:
                type: object
                example:
                  message: success
                  result: new recipe added
        '403':
          $ref: '#/components/responses/Not_Authenticated'
        '418':
          $ref: '#/components/responses/Client_Error'
        '500':
          $ref: '#/components/responses/Internal_Error'
      requestBody:
        description: Request body for posting a recipe
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: name of the new recipe
                  type: string
                  example: My Awesome Recipe!
                type:
                  description: >-
                    food type of the new recipe (limited to an array of possible
                    values)
                  type: string
                  enum:
                    - salad
                    - first_course
                    - main_course
                    - soup
                    - dessert
                    - drink
                  example: main_course
                descr:
                  description: brief description of the new recipe
                  type: string
                  example: This recipe will literally blow your mind!
                photo_data:
                  description: >-
                    photo names and URLs for the recipe (as respective keys and
                    values of a dict)
                  type: object
                  example:
                    photo_name_1: photo_url_1
                    photo_name_2: photo_url_2
                    photo_name_3: photo_url_3
                steps:
                  description: >-
                    an array of desriptions of steps needed to cook the new
                    recipe
                  type: array
                  items:
                    type: string
                  example:
                    - description of 1st step
                    - description of 2nd step
                    - description of 3rd step
                tags:
                  description: an array of tags needed to cook the new recipe
                  type: array
                  items:
                    type: string
                  example:
                    - tagname_1
                    - tagname_2
                    - tagname_3
              required:
                - id
                - name
                - type
      summary: Posts a new recipe
    parameters:
      - $ref: '#/components/parameters/user_header'
  '/recipes/{page_number}':
    get:
      description: Returns a page of library (either all of them or juct active ones)
      tags:
       - library
      responses:
        '200':
          description: A user profile for a certain nickname
        '403':
          $ref: '#/components/responses/Not_Authenticated'
        '500':
          $ref: '#/components/responses/Internal_Error'
      summary: Returns a page of library
    parameters:
      - $ref: '#/components/parameters/page_number'
      - $ref: '#/components/parameters/user_header'
      - name: active_only
        in: query
        schema:
          type: string
          enum:
            - 'true'
            - 'false'
  '/recipes/{page_number}/sort':
    get:
      description: Returns a page of library sorted in a certain order (either all of them or juct active ones)
      tags:
       - library
      responses:
        '200':
          description: A page of sorted library
        '403':
          $ref: '#/components/responses/Not_Authenticated'
        '500':
          $ref: '#/components/responses/Internal_Error'
      summary: Sorts library
    parameters:
      - $ref: '#/components/parameters/page_number'
      - $ref: '#/components/parameters/user_header'
      - name: by
        in: query
        required: true
        schema:
          type: string
          enum:
            - likes
            - date
            - name
      - name: active_only
        in: query
        schema:
          type: string
          enum:
            - 'true'
            - 'false'
      - name: desc
        in: query
        schema:
          type: string
          enum:
            - 'true'
            - 'false'
  '/recipes/{page_number}/filter':
    get:
      description: Returns a page of library filtered by a certain object (either all of them or juct active ones)
      tags:
       - library
      responses:
        '200':
          description: A page of filtered library
        '403':
          $ref: '#/components/responses/Not_Authenticated'
        '500':
          $ref: '#/components/responses/Internal_Error'
      summary: "Filters library "
    parameters:
      - $ref: '#/components/parameters/page_number'
      - $ref: '#/components/parameters/user_header'
      - name: active_only
        in: query
        schema:
          type: string
          enum:
            - 'true'
            - 'false'
      - name: by
        in: query
        required: true
        schema:
          type: string
          enum:
            - recipe_name
            - tag
            - food_type
            - user
            - photo_name
      - name: named
        in: query
        required: true
        schema:
          type: string
  '/recipes/show_recipe/{recipe_id}':
    get:
      description: Returns a recipe by a certain ID with all of its traits
      tags:
       - library
      responses:
        '200':
          description: A full recipe profile
        '403':
          $ref: '#/components/responses/Not_Authenticated'
        '500':
          $ref: '#/components/responses/Internal_Error'
      summary: Shows recipe profile
    parameters:
      - $ref: '#/components/parameters/user_header'
      - name: recipe_id
        in: path
        required: true
        schema:
          type: integer
        example: 1
  /alter:
    put:
      description: Allows to alter status of recipe or user (available for admin only, username and password have to be passed in headers)
      tags:
        - Admin API
      responses:
        '200':
          description: A full recipe profile
          content:
            application/json:
              schema:
                type: object
                example:
                  message: success
                  result: status of user (ID=1) set to active
        '403':
          description: A failure to authenticate the user in header
          content:
            application/json:
              schema:
                type: object
                example:
                  message: not authorized to alter status
        '418':
          $ref: '#/components/responses/Client_Error'
        '500':
          $ref: '#/components/responses/Internal_Error'
      requestBody:
        description: Request body for altering the status of an object
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - object
                - id
                - status
              properties:
                object:
                  description: object to alter status of (either user of recipe)
                  type: string
                  enum:
                    - user
                    - recipe
                  example: user
                id:
                  description: ID of the object to alter status of
                  type: integer
                  example: 1
                status:
                  description: status to alter (either active or blocked)
                  type: string
                  enum:
                    - active
                    - blocked
                  example: active
      summary: Allows to alter status of recipe or user
    parameters:
      - name: user
        in: header
        required: true
        schema:
          type: string
      - name: password
        in: header
        required: true
        schema:
          type: string
  /register:
    post:
      tags:
        - Getting started
      description: Registers a new user in the database (no verification needed)
      responses:
        '200':
          description: Successfully registered user
          content:
            application/json:
              schema:
                type: object
                example:
                  message: success
                  result: New user new_user successfully created
        '418':
          $ref: '#/components/responses/Client_Error'
        '500':
          $ref: '#/components/responses/Internal_Error'
      requestBody:
        description: Request body for registering a new user
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new_nickname
              properties:
                new_nickname:
                  description: Nickname of the new user
                  type: string
                  example: new_user
      summary: Registers a new user in the database
  '/{online_status}':
    put:
      description: Allow the user to check in or check out (headers verification needed)
      tags:
        - Getting started
      responses:
        '200':
          description: Successfully checked in or out
          content:
            application/json:
              schema:
                type: object
                example:
                  message: success
                  result: You successfully checked in
        '403':
          description: Failed to authenticate due to blockage
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'failed to authenticate, blocked user'
        '418':
          $ref: '#/components/responses/Client_Error'
        '500':
          $ref: '#/components/responses/Internal_Error'
      summary: Allows the user from headers to check in or check out
    parameters:
      - name: user
        description: user header (must be active)
        in: header
        required: true
        schema:
          type: string
          example: user_1
      - name: online_status
        in: path
        required: true
        schema:
          type: string
          enum:
            - online
            - offline
  '/likes/{recipe_id}':
    put:
      description:
        Allows the user to like someone's recipe
        (headers verification needed)
      tags:
        - Additional API
      responses:
        '200':
          description: Successfully liked the recipe
          content:
            application/json:
              schema:
                type: object
                example:
                  message: success
                  result: like given to recipe (ID=1)
        '403':
          $ref: '#/components/responses/Not_Authenticated'
        '418':
          $ref: '#/components/responses/Client_Error'
        '500':
          $ref: '#/components/responses/Internal_Error'
      summary: Allows the user to like library
    parameters:
      - $ref: '#/components/parameters/user_header'
      - name: recipe_id
        in: path
        description: Recipe ID
        required: true
        schema:
          type: integer
          example: 1
tags:
  - name: Getting started
    description: All operations for registering a new user and for checking in or out of the profile.
  - name: Admin API
    description: All operations, available for admin only
  - name: library
    description: All operations for dealing with library
  - name: users
    description: All operations for dealing with user profiles
  - name: Additional API
    description: All additional operations